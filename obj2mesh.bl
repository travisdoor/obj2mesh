//************************************************************************************************
// obj2mesh
//
// File:   obj2mesh.bl
// Author: Martin Dorazil
// Date:   21/11/19
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/memory.bl"
#load "std/print.bl"
#load "std/file.bl"

Mesh :: struct {
    c: []v4;
    v: []v3;
    n: []v3;
    uv: []v2;

    indices: []u32;
    data: *u8;
}

MESH_COLOR_FLAG : u32 : 1;
MESH_VERT_FLAG  : u32 : 2;
MESH_NORM_FLAG  : u32 : 4;
MESH_UV_FLAG    : u32 : 8;

MeshHeader :: struct {
    vc: u32;
    ic: u32;
    flags: u32;
}

OUT_FILE :: "test.mesh";

main :: fn () s32 {
    buffer_size ::sizeof(MeshHeader);
    buffer := mem_alloc(buffer_size); 
    defer mem_free(buffer);

    header := cast(*MeshHeader) buffer;
    header.vc = 10;
    header.ic = 20;
    header.flags = MESH_COLOR_FLAG | MESH_NORM_FLAG;

    file :: file_open(OUT_FILE, FileOpenModes.Write, FileOpenModes.Binary);
    defer file_close(file);

    w :: file_write_binary(file, auto buffer, buffer_size);
    print("Written % bytes.\n", w);

    return 0;
}
